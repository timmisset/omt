{
  parserClass="org.intellij.sdk.language.parser.OMTParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="OMT"
  psiImplClassSuffix="Impl"
  psiPackage="com.misset.opp.omt.psi"
  psiImplPackage="com.misset.opp.omt.psi.impl"

  elementTypeHolderClass="com.misset.opp.omt.psi.OMTTypes"
  elementTypeClass="com.misset.opp.omt.psi.OMTElementType"
  tokenTypeClass="com.misset.opp.omt.psi.OMTTokenType"

  psiImplUtilClass="com.misset.opp.omt.psi.impl.OMTPsiImplUtil"
}

// the end of the file (or the entire file) can be a (set of) comment(s)
OMTFile ::= leading? block* trailing?

start ::=                                   START_TOKEN leading?
end ::=                                     trailing? END_TOKEN
indentToken ::=                             INDENT | INDENT2
dedentToken ::=                             DEDENT | DEDENT2
// a block is a yaml block consisting of a propertyLabel (key): and a sequence, a map or a scalar
block ::=                                   leading? (blockEntry+ | (indentToken blockEntry+ dedentToken)) trailing?
blockEntry ::=                              leading? specificBlock | (leading? propertyLabel trailing? ((block | sequence | scalar) | (indentToken (block | sequence | scalar) dedentToken))) {
                                            mixin="com.misset.opp.omt.psi.impl.OMTAnnotationHolderImpl"
                                            implements="com.misset.opp.omt.psi.support.OMTAnnotationHolder"
}
propertyLabel ::=                           PROPERTY { methods=[getPropertyLabelName]}

// a scalar single statement (multiline optional) following a property label
scalar ::=                                  comment? scalarValue
scalarValue ::=                             start (parameterWithType | variableAssignment | block | queryPath | script) end

// a sequence must start with a newline followed by items, lead by their bullet (-)
// indentation is allowed but not required. If indentToken, it must 
sequence ::=                                trailing? sequenceItem+
sequenceItem ::=                            leading? SEQUENCE_BULLET (scalarValue | block)

// SPECIFIC BLOCKS
specificBlock ::=                          importBlock | exportBlock | prefixBlock | queriesBlock | commandsBlock | modelBlock | moduleBlock {
                                                    methods=[getName]
                                                }

// sequences
exportBlock ::=                             EXPORT_START trailing? memberList?
memberList ::=                              (leading? SEQUENCE_BULLET member trailing?)+ | (indentToken (leading? SEQUENCE_BULLET member trailing?)+ dedentToken)
member ::=                                  start OPERATOR end {
                                                       mixin="com.misset.opp.omt.psi.impl.OMTMemberNamedElementImpl"
                                                       implements="com.misset.opp.omt.psi.named.OMTMemberNamedElement"
                                                       methods=[getName setName getNameIdentifier]
                                                     }

// scalars
queriesBlock::=                             QUERY_BLOCK_START (start PIPE trailing? defineQueryStatement* end)? {
                                                                implements="com.misset.opp.omt.psi.support.OMTDefinedBlock"
                                                                methods=[getStatements]
                                                                }
commandsBlock::=                            COMMAND_BLOCK_START (start PIPE trailing? defineCommandStatement* end)? {
                                                                implements="com.misset.opp.omt.psi.support.OMTDefinedBlock"
                                                                methods=[getStatements]
                                                                }

moduleBlock::=                              leading? MODULE_NAME_START moduleName trailing?
moduleName::=                               NAME | OPERATOR

// maps
importBlock ::=                             leading? IMPORT_START trailing? indentToken import* dedentToken
import ::=                                  leading? importSource trailing? memberList?
importSource ::=                            importLocation EMPTY_ARRAY? {
                                                                           mixin="com.misset.opp.omt.psi.impl.OMTImportNamedElementImpl"
                                                                           implements="com.misset.opp.omt.psi.named.OMTImportNamedElement"
                                                                           methods=[getName setName getNameIdentifier]
                                                                         }
importLocation ::=                          PROPERTY | IMPORT_PATH

prefixBlock::=                              PREFIX_BLOCK_START trailing? (prefix+ | (indentToken prefix+ dedentToken))?
prefix::=                                   leading? namespacePrefix namespaceIri trailing?
namespacePrefix::=                          PROPERTY | (NAMESPACE COLON)            {
                                                                                         mixin="com.misset.opp.omt.psi.impl.OMTNamespacePrefixNamedElementImpl"
                                                                                         implements="com.misset.opp.omt.psi.named.OMTNamespacePrefixNamedElement"
                                                                                         methods=[getName setName getNameIdentifier]
                                                                                   }
namespaceIri ::=                            start IRI end
curieElement ::=                            namespacePrefix NAMESPACE_MEMBER       { methods = [getPrefix isDefinedByPrefix]}
curieConstantElement ::=                    CURIE_CONSTANT_ELEMENT_PREFIX curieElement

modelBlock::=                               MODEL_BLOCK_START trailing? indentToken modelItemBlock* dedentToken
modelItemBlock::=                           leading? modelItemLabel trailing? block?
modelItemLabel::=                           propertyLabel modelItemTypeElement  {
                                                                                 mixin="com.misset.opp.omt.psi.impl.OMTMemberNamedElementImpl"
                                                                                 implements="com.misset.opp.omt.psi.named.OMTMemberNamedElement"
                                                                                 methods=[getName setName getNameIdentifier]
                                                                                 }
modelItemTypeElement ::=                    MODEL_ITEM_TYPE

// COMMENTS
// Can occur on empty lines (JavaDocs and End Of Line Comments) or at the end of lines (End of Line Comments)
jdcomment ::=                               JAVADOCS_START JAVADOCS_CONTENT+ JAVADOCS_END
comment ::=                                 END_OF_LINE_COMMENT | jdcomment
eolComment ::=                              END_OF_LINE_COMMENT
// trailing is everything at the end of the current line and before NEW_LINE.
// It can be simply the NEW_LINE or an eolComment followed by a NEW_LINE
trailing ::=                                eolComment+
// leading? is everything before a block or item. Assuming that comments are written above the code they are
// commenting on, this should help to relate the comment to the code
leading ::=                                 comment+

// ////////////////////////////////////////////////////
// ODT
// ////////////////////////////////////////////////////
constant_value ::=                          STRING | INTEGER | DECIMAL | NULL | BOOLEAN | TYPED_VALUE
// a variable is declared using VAR and one or more variable names. Optionally an assignment is added
// the assignment is deconstructed to the entire set of variables that is declared. i.e. VAR $a, $b = [1, 2]. $a == 1, $b == 2
// or can be VAR $a = 1, $b = 2 etc. todo: check if this is actually true
declareVariable ::=                         DECLARE_VAR (variableAssignment | variable) (COMMA (variableAssignment | variable))*
// a variable assignment is $var = 1234
variableAssignment::=                       variable (COMMA variable)* EQUALS variableValue
// a variable can be assigned with anything
variableValue ::=                           queryPath | commandCall | constant_value

// a parameter type is used to typecast input parameters in OMT model items
variable ::=                                VARIABLE_NAME | ignoredVariable | globalVariable {
                                                                                 mixin="com.misset.opp.omt.psi.impl.OMTVariableNamedElementImpl"
                                                                                 implements="com.misset.opp.omt.psi.named.OMTVariableNamedElement"
                                                                                 methods=[getName setName isDeclaredVariable isIgnoredVariable isGlobalVariable getNameIdentifier]
                                                                               }
// the lexer should determine if operating in a state of declare and provide a difference response for the discovered variable name
globalVariable ::=                          GLOBAL_VARIABLE_NAME
ignoredVariable ::=                         IGNORE_VARIABLE_NAME
parameterWithType ::=                       variable PARENTHESES_OPEN (parameterType | OPERATOR) PARENTHESES_CLOSE
parameterType ::=                           IRI | (namespacePrefix NAMESPACE_MEMBER) {
    methods = [isDefinedByPrefix]
}

// SCRIPT
// an ODT (script) block is always started by a Yaml scalar node
// it can start on the same line and be restricted to that line (not required) or it can be started by the
// literal indentifier, the "|" in Yaml. In which case it should be followed by an empty line and and 
script ::=                                  PIPE trailing? (scriptLine+ | queryPath) 
commandBlock ::=                            CURLY_OPEN trailing? (script | scriptLine+) CURLY_CLOSED
// a scriptline is contained by the addition of the semicolon at the end
scriptLine ::=                              leading? ((scriptContent SEMICOLON) | commandBlock | logicalBlock) trailing?
// the contents of a script, contained by a scriptLine or Scalar
scriptContent ::=                           declareVariable | variableAssignment | definePrefix | commandCall | assignmentStatement |
                                            addToCollection | removeFromCollection | logicalBlock | returnStatement | queryPath

// DEFINED MEMBERS
// ODT Members are Operator and Commands, both can be created by a DEFINE statement
// there is also a collection of BuiltIn operators and commands which are included
// and finally, all runnable OMT modelitems are available as Commands (Activity, Procedure) or Operator (StandAloneQuery)
// only the Defined members are part of set of the grammar parser
defineName ::=                              NAME | OPERATOR    {
                                                           mixin="com.misset.opp.omt.psi.impl.OMTMemberNamedElementImpl"
                                                           implements="com.misset.opp.omt.psi.named.OMTMemberNamedElement"
                                                           methods=[getName setName getNameIdentifier]
                                                         }
defineQueryStatement ::=                    leading? DEFINE_START DEFINE_QUERY defineName defineParam? LAMBDA queryPath SEMICOLON trailing? {
                                                            implements="com.misset.opp.omt.psi.support.OMTDefinedStatement"
                                                            extends="com.misset.opp.omt.psi.impl.OMTDefinedStatementImpl"
                                            }
defineCommandStatement ::=                  leading? DEFINE_START DEFINE_COMMAND defineName defineParam? LAMBDA commandBlock trailing? {
                                                          implements="com.misset.opp.omt.psi.support.OMTDefinedStatement"
                                                          extends="com.misset.opp.omt.psi.impl.OMTDefinedStatementImpl"
                                            }
definePrefix ::=                            leading? PREFIX_DEFINE_START prefix trailing?
defineParam ::=                             PARENTHESES_OPEN (variable (COMMA variable)*)? PARENTHESES_CLOSE

// MEMBER CALLS
// A call to either an Operator or a Command. In case of the latter, it's always prefixed with @
operatorCall ::=                            OPERATOR flagSignature? signature? {
                                                             mixin="com.misset.opp.omt.psi.impl.OMTCallImpl"
                                                             implements="com.misset.opp.omt.psi.support.OMTCall"
                                                             methods=[getName setName getNameIdentifier canCallOperator canCallCommand]
                                                           }
commandCall ::=                             COMMAND flagSignature? signature?
                                                            {
                                                             mixin="com.misset.opp.omt.psi.impl.OMTCallImpl"
                                                             implements="com.misset.opp.omt.psi.support.OMTCall"
                                                             methods=[getName setName getNameIdentifier canCallOperator canCallCommand]
                                                           }
signature ::=                               PARENTHESES_OPEN ((queryPath | commandBlock | commandCall | operatorCall) (COMMA (queryPath | commandBlock | commandCall | operatorCall))*)? PARENTHESES_CLOSE {
                                                             methods=[numberOfParameters]
}
flagSignature ::=                           FLAG

logicalBlock ::=                            ifBlock commandBlock trailing? (ELSE_OPERATOR ifBlock commandBlock)* elseBlock?
ifBlock ::=                                 IF_OPERATOR (queryPath | (PARENTHESES_OPEN queryPath PARENTHESES_CLOSE))
elseBlock ::=                               ELSE_OPERATOR commandBlock
returnStatement ::=                         RETURN_OPERATOR (queryPath | commandCall)?
chooseBlock ::=                             CHOOSE_OPERATOR trailing?
                                                leading? (WHEN_OPERATOR queryPath LAMBDA queryPath)+
                                                leading? (OTHERWISE_OPERATOR LAMBDA queryPath)?
                                                END_OPERATOR trailing?

// an equation statement should contain a left hand value and 1+ condition operators + right hand values:
// $value == $value == $value etc...
equationStatement ::=                       (CONDITIONAL_OPERATOR queryStep)+
assignmentStatement ::=                     queryPath trailing? EQUALS trailing? (queryPath | commandCall)
addToCollection ::=                         queryPath trailing? ADD trailing? (queryPath | commandCall)
removeFromCollection ::=                    queryPath trailing? REMOVE trailing? (queryPath | commandCall)

// QUERIES
// A queryPath consists of one or more querySteps. A queryStep can be considered forward or reverse (indicated by ^)
// to reduce the complexity of parsing, slashes will be captured but are not required
queryPath ::=                               (FORWARD_SLASH? (queryStep | queryReverseStep))+ (PIPE queryPath)?
queryStep ::=                               equationStatement | constant_value | variable | curieConstantElement | curieElement |
                                            operatorCall | IRI | DOT | OWLPROPERTY | subQuery | CONDITIONAL_OPERATOR |
                                            queryFilter | trailing | leading | chooseBlock | interpolatedString | PLUS | ASTERIX
queryReverseStep ::=                        CARAT queryStep

// a query filter is contained by brackets [] and should resolve to boolean
queryFilter ::=                             BRACKET_OPEN queryPath BRACKET_CLOSED

// a recursion will continuously collect items based on the outcome of the previous recursion and the path described in the recursion
// this makes it easy to traverse a graph for nested elements of identical/similar design
subQuery ::=                                PARENTHESES_OPEN queryPath PARENTHESES_CLOSE

// interpolation
interpolation ::=                           DOLLAR CURLY_OPEN queryPath CURLY_CLOSED
interpolatedString ::=                      BACKTICK (interpolation | STRING)* BACKTICK
