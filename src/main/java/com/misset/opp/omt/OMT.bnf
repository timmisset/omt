{
  parserClass="org.intellij.sdk.language.parser.OMTParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="OMT"
  psiImplClassSuffix="Impl"
  psiPackage="com.misset.opp.omt.psi"
  psiImplPackage="com.misset.opp.omt.psi.impl"

  elementTypeHolderClass="com.misset.opp.omt.psi.OMTTypes"
  elementTypeClass="com.misset.opp.omt.psi.OMTElementType"
  tokenTypeClass="com.misset.opp.omt.psi.OMTTokenType"

  psiImplUtilClass="com.misset.opp.omt.psi.impl.OMTPsiImplUtil"
}

OMTFile ::= item_*

private item_ ::= (block)

block::= (BLOCK_ID INDENT blockContent DEDENT)
blockContent ::= (block | list)

list ::= (BLOCK_ID INDENT listItem DEDENT)
comment ::= (END_OF_LINE_COMMENT)

property ::= ((NAME EQUALS SYMBOL) | (BLOCK_ID queryStatement) | propertyScriptBlock | (variableName EQUALS SYMBOL))
propertyScriptBlock ::= (BLOCK_ID PIPE scriptBlock?)
variable ::= (variableName variableType? variableValue?)
variableName ::= (DOLLAR NAME)
variableType ::= (PARENTHESIS_OPEN queryPath PARENTHESIS_CLOSED)
variableValue ::= (EQUALS ((variableName queryStatement+) | queryStatement+ | acceptedVariableValue))
listItem ::= (LISTITEM_BULLET variable)
inputArgument ::= (variable | variableValue)
inputArguments ::= (PARENTHESIS_OPEN (COMMA inputArgument | inputArgument)* PARENTHESIS_CLOSED )

prefix ::= (SYMBOL COLON PREFIX_IRI)
queryPart ::= (inputArgument | queryPath | queryOperator)
queryStatement ::= (SLASH queryPart | queryPart)+
query ::= (QUERY_DEFINE queryOperator LAMBDA_ARROW queryStatement SEMICOLON)
queryOperator ::= (NAME inputArguments?)
queryPath ::= (CURIE)

model ::= (BLOCK_ID modelItem+)
modelItem ::= (BLOCK_ID MODEL_ITEM_TYPE modelBlockGroup+)
modelBlockContent ::= INDENT (prefix+ | listItem+ | property+ | query+) DEDENT
modelBlockGroup ::= (BLOCK_ID modelBlockContent) | (BLOCK_ID modelBlockGroup) | propertyScriptBlock

acceptedVariableValue ::= (BOOLEAN | NUMBER | STRING | variableName)
variableDeclare ::= (DECLARE_VAR variableName variableValue?)
variableAssignment ::= (variableName variableValue)
scriptLine ::= ((variableDeclare | variableAssignment) SEMICOLON)
scriptBlock ::= scriptLine*
