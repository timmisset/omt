{
  parserClass="org.intellij.sdk.language.parser.OMTParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="OMT"
  psiImplClassSuffix="Impl"
  psiPackage="com.misset.opp.omt.psi"
  psiImplPackage="com.misset.opp.omt.psi.impl"

  elementTypeHolderClass="com.misset.opp.omt.psi.OMTTypes"
  elementTypeClass="com.misset.opp.omt.psi.OMTElementType"
  tokenTypeClass="com.misset.opp.omt.psi.OMTTokenType"

  psiImplUtilClass="com.misset.opp.omt.psi.util.PsiImplUtil"

}

// the end of the file (or the entire file) can be a (set of) comment(s)
OMTFile ::= leading? rootBlock?

indentToken ::=                             INDENT | INDENT2
dedentToken ::=                             DEDENT | DEDENT2
// a block is a yaml block consisting of a propertyLabel (key): and a sequence, a map or a scalar
block ::=                                   rootBlock | indentedBlock { methods=[getBlockEntryList]}
rootBlock ::=                               blockEntry+ { extends=block }
indentedBlock ::=                           indentToken blockEntry+ dedentToken { extends=block }
blockEntry ::=                              specificBlock | genericBlock {
                                            methods=[ getName getLabel ]
}
propertyLabel ::=                           PROPERTY { methods=[getPropertyLabelName]}

// a scalar single statement (multiline optional) following a property label
scalar ::=                                  comment? scalarValue
scalarValue ::=                             parameterWithType | variableAssignment | indentedBlock | nakedString | query | script

// a sequence must start with a newline followed by items, lead by their bullet (-)
// indentation is allowed but not required. If indented, it must dedent
sequence ::=                                sequenceItem+ | (indentToken sequenceItem+ dedentToken)
sequenceItem ::=                            leading? SEQUENCE_BULLET (scalarValue | block)?

genericBlock ::=                            leading? propertyLabel ((indentedBlock | sequence | scalar) | (indentToken (sequence | scalar) dedentToken))? {
                                            extends=blockEntry
                                            methods=[getBlock]
}

// SPECIFIC BLOCKS
specificBlock ::=                          importBlock | exportBlock | prefixBlock | queriesBlock | commandsBlock | modelBlock | moduleBlock {
                                                    extends=blockEntry
                                            }

// sequences
exportBlock ::=                             leading? EXPORT_START memberList? { extends=specificBlock }
memberList ::=                              memberListItem+ | (indentToken memberListItem+ dedentToken?)
memberListItem ::=                          (leading? SEQUENCE_BULLET member?) { methods=[getName] }
member ::=                                  OPERATOR {
                                                       mixin="com.misset.opp.omt.psi.impl.OMTMemberNamedElementImpl"
                                                       implements="com.misset.opp.omt.psi.named.OMTMemberNamedElement"
                                                       methods=[getName setName getNameIdentifier]
                                                     }

// scalars
queriesBlock::=                             leading? QUERY_BLOCK_START (PIPE? defineQueryStatement*)? {
                                                                implements="com.misset.opp.omt.psi.support.OMTDefinedBlock"
                                                                methods=[getStatements]
                                                                extends=specificBlock
                                                                }
commandsBlock::=                            leading? COMMAND_BLOCK_START (PIPE? defineCommandStatement*)? {
                                                                implements="com.misset.opp.omt.psi.support.OMTDefinedBlock"
                                                                methods=[getStatements]
                                                                extends=specificBlock
                                                                }

moduleBlock::=                              leading? MODULE_NAME_START moduleName  { extends=specificBlock }
moduleName::=                               NAME | OPERATOR

// maps
importBlock ::=                             leading? IMPORT_START (indentToken import+ dedentToken)? { extends=specificBlock }
import ::=                                  leading? importSource memberList?
importSource ::=                            importLocation EMPTY_ARRAY? {
                                                                           mixin="com.misset.opp.omt.psi.impl.OMTImportNamedElementImpl"
                                                                           implements="com.misset.opp.omt.psi.named.OMTImportNamedElement"
                                                                           methods=[getName setName getNameIdentifier]
                                                                         }
importLocation ::=                          (MODULE_START indentToken PROPERTY dedentToken) | PROPERTY | IMPORT_PATH

prefixBlock::=                              leading? PREFIX_BLOCK_START indentToken prefix+ dedentToken { extends=specificBlock }
prefix::=                                   leading? namespacePrefix namespaceIri { methods=[getName] }
namespacePrefix::=                          PROPERTY | (NAMESPACE COLON)            {
                                                                                         mixin="com.misset.opp.omt.psi.impl.OMTNamespacePrefixNamedElementImpl"
                                                                                         implements="com.misset.opp.omt.psi.named.OMTNamespacePrefixNamedElement"
                                                                                         methods=[getName setName getNameIdentifier]
                                                                                   }
namespaceIri ::=                            IRI                                   { methods = [getName getNamespace] }
curieElement ::=                            namespacePrefix NAMESPACE_MEMBER       {
                                                implements="com.misset.opp.omt.psi.resolvable.OMTResolvableResource"
                                                extends="com.misset.opp.omt.psi.resolvable.impl.OMTCurieElementResolvableImpl"
                                                methods = [getPrefix isDefinedByPrefix getAsResource getPrefixName]
                                                }
curieConstantElement ::=                    (CURIE_CONSTANT_ELEMENT_PREFIX | FORWARD_SLASH) curieElement queryFilter*
{
                                                implements="com.misset.opp.omt.psi.resolvable.OMTQueryStepResolvable"
                                                extends="com.misset.opp.omt.psi.resolvable.impl.OMTCurieConstantElementResolvableImpl" }

modelBlock::=                               leading? MODEL_BLOCK_START (indentToken modelItemBlock+ dedentToken)? { extends=specificBlock }
modelItemBlock::=                           leading? modelItemLabel indentedBlock? {extends=blockEntry methods=[getType getBlock]}
modelItemLabel::=                           propertyLabel modelItemTypeElement  {
                                                                                 mixin="com.misset.opp.omt.psi.impl.OMTMemberNamedElementImpl"
                                                                                 implements="com.misset.opp.omt.psi.named.OMTMemberNamedElement"
                                                                                 methods=[getName setName getNameIdentifier]
                                                                                 }
modelItemTypeElement ::=                    MODEL_ITEM_TYPE

// COMMENTS
// Can occur on empty lines (JavaDocs and End Of Line Comments) or at the end of lines (End of Line Comments)
jdComment ::=                               JAVADOCS_START jdContent* JAVADOCS_END END_TOKEN?
jdContent ::=                               JAVADOCS_CONTENT+ | START_TOKEN | END_TOKEN | parameterAnnotation
parameterAnnotation ::=                     ANNOTATE_PARAMETER parameterWithType
comment ::=                                 jdComment
// leading? is everything before a block or item. Assuming that comments are written above the code they are
// commenting on, this should help to relate the comment to the code
leading ::=                                 comment+

// ////////////////////////////////////////////////////
// ODT
// ////////////////////////////////////////////////////
constant_value ::=                          STRING | INTEGER | DECIMAL | NULL | BOOLEAN | TYPED_VALUE {
                                                implements="com.misset.opp.omt.psi.resolvable.OMTResolvableResource"
                                                extends="com.misset.opp.omt.psi.resolvable.impl.OMTConstantValueResolvableImpl"
}
// a variable is declared using VAR and one or more variable names. Optionally an assignment is added
// the assignment is deconstructed to the entire set of variables that is declared. i.e. VAR $a, $b = [1, 2]. $a == 1, $b == 2
// or can be VAR $a = 1, $b = 2 etc. todo: check if this is actually true
declareVariable ::=                         DECLARE_VAR (variableAssignment | variable) (COMMA (variableAssignment | variable))*
// a variable assignment is $var = 1234
variableAssignment::=                       variable (COMMA variable)* EQUALS variableValue
// a variable can be assigned with anything
variableValue ::=                           query | commandCall

// a parameter type is used to typecast input parameters in OMT model items
variable ::=                                VARIABLE_NAME | ignoredVariable | globalVariable {
                                                                                 mixin="com.misset.opp.omt.psi.impl.OMTVariableNamedElementImpl"
                                                                                 implements="com.misset.opp.omt.psi.named.OMTVariableNamedElement"
                                                                                 methods=[getName setName isDeclaredVariable isIgnoredVariable isGlobalVariable getNameIdentifier getType getValue getAssignments]
                                                                               }
// the lexer should determine if operating in a state of declare and provide a difference response for the discovered variable name
globalVariable ::=                          GLOBAL_VARIABLE_NAME
ignoredVariable ::=                         IGNORE_VARIABLE_NAME
parameterWithType ::=                       variable PARENTHESES_OPEN parameterType? PARENTHESES_CLOSE { methods=[ getType ]}

parameterType ::=                           IRI | (namespacePrefix NAMESPACE_MEMBER) | OPERATOR | NAMESPACE_MEMBER {
    methods = [isDefinedByPrefix getAsResource]
}

// SCRIPT
// an ODT (script) block is always started by a Yaml scalar node
// it can start on the same line and be restricted to that line (not required) or it can be started by the
// literal indentifier, the "|" in Yaml. In which case it should be followed by an empty line and and 
script ::=                                  PIPE (scriptLine+ | query)?
commandBlock ::=                            CURLY_OPEN (script | scriptLine+)? CURLY_CLOSED {
                                                implements="com.misset.opp.omt.psi.resolvable.OMTResolvableResource"
                                                extends="com.misset.opp.omt.psi.resolvable.impl.OMTCommandBlockResolvableImpl" }
// a scriptline is contained by the addition of the semicolon at the end
scriptLine ::=                              leading? ((scriptContent SEMICOLON*) | commandBlock | logicalBlock)
// the contents of a script, contained by a scriptLine or Scalar
scriptContent ::=                           declareVariable | variableAssignment | definePrefix | commandCall | assignmentStatement |
                                            addToCollection | removeFromCollection | returnStatement | query

// DEFINED MEMBERS
// ODT Members are Operator and Commands, both can be created by a DEFINE statement
// there is also a collection of BuiltIn operators and commands which are included
// and finally, all runnable OMT modelitems are available as Commands (Activity, Procedure) or Operator (StandAloneQuery)
// only the Defined members are part of set of the grammar parser
defineName ::=                              NAME | OPERATOR    {
                                                           mixin="com.misset.opp.omt.psi.impl.OMTMemberNamedElementImpl"
                                                           implements="com.misset.opp.omt.psi.named.OMTMemberNamedElement"
                                                           methods=[getName setName getNameIdentifier]
                                                         }
defineQueryStatement ::=                    leading? DEFINE_START DEFINE_QUERY defineName defineParam? LAMBDA query SEMICOLON* {
                                                            implements="com.misset.opp.omt.psi.support.OMTDefinedStatement"
                                                            extends="com.misset.opp.omt.psi.impl.OMTDefinedStatementImpl"
                                            }
defineCommandStatement ::=                  leading? DEFINE_START DEFINE_COMMAND defineName defineParam? LAMBDA commandBlock {
                                                          implements="com.misset.opp.omt.psi.support.OMTDefinedStatement"
                                                          extends="com.misset.opp.omt.psi.impl.OMTDefinedStatementImpl"
                                            }
definePrefix ::=                            leading? PREFIX_DEFINE_START prefix 
defineParam ::=                             PARENTHESES_OPEN (variable (COMMA variable)*)? PARENTHESES_CLOSE

// MEMBER CALLS
// A call to either an Operator or a Command. In case of the latter, it's always prefixed with @
operatorCall ::=                            OPERATOR flagSignature? signature? {
                                                             implements="com.misset.opp.omt.psi.support.OMTCall"
                                                             extends="com.misset.opp.omt.psi.resolvable.impl.OMTCallResolvableImpl"
                                                             methods=[getName setName getNameIdentifier]
                                                           }
commandCall ::=                             COMMAND flagSignature? signature?
                                                            {
                                                             implements="com.misset.opp.omt.psi.support.OMTCall"
                                                             extends="com.misset.opp.omt.psi.resolvable.impl.OMTCallResolvableImpl"
                                                             methods=[getName setName getNameIdentifier]
                                                           }
signature ::=                               PARENTHESES_OPEN (signatureArgument (COMMA signatureArgument)*)? PARENTHESES_CLOSE {
                                                             methods=[numberOfParameters]
}
signatureArgument ::=                       resolvableValue | commandBlock {
                                                implements="com.misset.opp.omt.psi.resolvable.OMTResolvableResource"
                                                extends="com.misset.opp.omt.psi.resolvable.impl.OMTSignatureArgumentResolvableImpl" }
flagSignature ::=                           FLAG
resolvableValue ::=                         query | commandCall {
                                              implements="com.misset.opp.omt.psi.resolvable.OMTResolvableResource"
                                              extends="com.misset.opp.omt.psi.resolvable.impl.OMTResolvableValueResolvableImpl" }
logicalBlock ::=                            ifBlock commandBlock? (ELSE_OPERATOR ifBlock commandBlock?)* elseBlock?
ifBlock ::=                                 IF_OPERATOR (query | (PARENTHESES_OPEN query PARENTHESES_CLOSE))
elseBlock ::=                               ELSE_OPERATOR commandBlock
returnStatement ::=                         RETURN_OPERATOR resolvableValue?
chooseBlock ::=                             CHOOSE_OPERATOR 
                                                whenPath+
                                                otherwisePath?
                                                endPath
whenPath ::=                                leading? WHEN_OPERATOR booleanStatement LAMBDA query
otherwisePath ::=                           leading? OTHERWISE_OPERATOR LAMBDA query
endPath ::=                                 END_OPERATOR 
// QUERIES
// A query is the superclass of different variants of a query.
// it is used to break the array into meaningful subsections based on detected tokens
// for example, the queryArray will break the array into subsections by the delimiter '|' for the array
//
// with regular bnf -> psi generation, the query would encapsulate the queryPath, ... items
// by using the extension mechanism, it only becomes their superclass
query     ::=                               queryPath | queryArray | booleanStatement | equationStatement
                                            { methods = [getDefinedName ]
                                              implements="com.misset.opp.omt.psi.resolvable.OMTQueryResolvable" }
// The queryPath is the base, eventually all queries will descent into a queryPath even for single steps
// For example, a queryArray can consist of 'a' | 'b' in which both 'a' and 'b' are encapsulated
// into a queryPath and subsequently a queryStep
// The queryPath is constructed using the Forward slash as delimiter a contains as many steps as possible
queryPath ::=                               (curieConstantElement | queryStep) (FORWARD_SLASH queryStep?)*
{
                                                implements="com.misset.opp.omt.psi.resolvable.OMTQueryResolvable"
                                                mixin="com.misset.opp.omt.psi.resolvable.impl.OMTQueryPathResolvableImpl"
                                                extends=query}
// The queryArray uses the PIPE symbol to split the array where both can be resolved separately
queryArray ::=                              query (PIPE query)+
{
                                                implements="com.misset.opp.omt.psi.resolvable.OMTQueryResolvable"
                                                mixin="com.misset.opp.omt.psi.resolvable.impl.OMTQueryArrayResolvableImpl"
                                                extends=query
                                                }
// A booleanStatement works the same as the queryArray but using a BOOLEAN_OPERATOR
// When resolving, it should be checked that all parts of the query are resolved to boolean types
booleanStatement ::=                        query (BOOLEAN_OPERATOR query)+
{
                                                implements="com.misset.opp.omt.psi.resolvable.OMTQueryResolvable"
                                                mixin="com.misset.opp.omt.psi.resolvable.impl.OMTBooleanStatementResolvableImpl"
                                                extends=query}
// The equationStatement uses a conditional operator (like ==, >=, <=) to split the statement
// it only allows a left-hand and right-hand query, both should be resolved to boolean type
equationStatement ::=                       query CONDITIONAL_OPERATOR query
{                                               methods=[getOpposite]
                                                implements="com.misset.opp.omt.psi.resolvable.OMTQueryResolvable"
                                                mixin="com.misset.opp.omt.psi.resolvable.impl.OMTEquationStatementResolvableImpl"
                                                extends=query
                                                }
// The negated statement detects the usage of the NOT operator
// This can be used as '.. / NOT IN (...)' OR '.. / NOT'. In the former the negation is based on the subsequent
// query whereas the latter it's based on the preceding query
// NOTE: for some reason the 2 options need to be stated separately for the compiler to make sense of it
// creation of a single negatedStatement with both options is not working
// the leading statement is preferred
negatedStep ::=                             NOT_OPERATOR query {
                                                implements="com.misset.opp.omt.psi.resolvable.OMTQueryResolvable"
                                                mixin="com.misset.opp.omt.psi.resolvable.impl.OMTNegatedStepResolvableImpl"
                                                extends=query
 }

// a queryStep is anything that is acceptable between the / ... / FORWARD_SLASH delimiters in the query or
// that add some additional behavior to the step (like a filter)
// TODO: it might be worthwhile to consider appending the filter to the queryStep instead of making it a separate step
queryStep ::=                               leading? (queryReverseStep |
                                            constant_value | variable | curieElement |
                                            operatorCall | IRI | DOT | OWLPROPERTY | interpolatedString |
                                            chooseBlock | negatedStep | NOT_OPERATOR |
                                            subQuery)
                                            stepDecorator? queryFilter*
                                            {
                                                implements="com.misset.opp.omt.psi.resolvable.OMTQueryStepResolvable"
                                                extends="com.misset.opp.omt.psi.resolvable.impl.OMTQueryStepResolvableImpl" }
queryReverseStep ::=                        CARET curieElement? stepDecorator? queryFilter*
                                            {
                                                implements="com.misset.opp.omt.psi.resolvable.OMTQueryStepResolvable"
                                                mixin="com.misset.opp.omt.psi.resolvable.impl.OMTQueryReverseStepResolvableImpl"
                                                extends=queryStep
                                                }
// Decorators for the query steps, can be added to individual steps or subqueries
// QUESTION_MARK ?  == 0 or 1
// PLUS +           == 1 or more
// ASTERIX          == 0 or more
stepDecorator ::=                           ASTERIX | PLUS | QUESTION_MARK
// a query filter is contained by brackets [] and should resolve to boolean
queryFilter ::=                             BRACKET_OPEN query BRACKET_CLOSED | EMPTY_ARRAY

// the subQuery encapsulated a query by PARENTHESES, it can be resolved as-is, for example in an equation
// or be cast to a traverse-like behavior using the ASTERIX and PLUS appendixes
subQuery ::=                                PARENTHESES_OPEN query PARENTHESES_CLOSE
                                            {
                                                implements="com.misset.opp.omt.psi.resolvable.OMTQueryStepResolvable"
                                                mixin="com.misset.opp.omt.psi.resolvable.impl.OMTSubQueryResolvableImpl"
                                                extends=queryStep
                                            }

// the assignment statement is used to assign a value to a left-hand target, like a variable or a resolved resource iri
// addTo and removeFrom are similar which will add/remove the item to/from the collection
// these are not used defined query statement but in command blocks
assignmentStatement ::=                     query EQUALS resolvableValue
addToCollection ::=                         query ADD resolvableValue
removeFromCollection ::=                    query REMOVE resolvableValue

// interpolation
interpolationTemplate ::=                   TEMPLATE_OPEN query TEMPLATE_CLOSED
interpolatedString ::=                      BACKTICK (interpolationTemplate | STRING)* BACKTICK { extends=queryStep }

// string / interpolated string without encapsulation of ' or `
nakedString ::=                             (COMMA | EQUALS | SEQUENCE_BULLET | interpolationTemplate | (OPERATOR OPERATOR+))+

